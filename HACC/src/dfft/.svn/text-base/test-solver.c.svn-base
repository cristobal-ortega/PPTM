#include <assert.h>
#include <errno.h>
#include <getopt.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "complex-type.h"
#include <fftw3-mpi.h>
#include "fp.h"
#include "distribution.h"

const char *description =
    "\n"
    "TEST: FFTW, 3-d data distribution, solver\n"
    "\n"
    "FFTW MPI transform, combined with a 1-d <--> 3-d\n"
    "data redistribution so that it can be applied directly\n"
    "to problems requiring a 3-d data distribution\n"
    "\n"
    "This test applies the FFT to solving the Poisson equation \n"
    "  Laplacian phi = - rho\n"
    "using the following k-space Green's Function:\n"
    "  G(k1, k2, k3) = - 1 / 2 (c(k1) + c(k2) + c(k3) - 3)\n"
    "                ~ |k|^-2, n -> oo\n"
    "where\n"
    "  c(k) = cos(2 pi k / n)\n"
    "We calculate both phi and grad phi, the latter obtained using\n"
    "the Green's function \n"
    "  G_i(k1, k2, k3) = - i s(k_i) / 2 (c(k1) + c(k2) + c(k3) - 3)\n"
    "                  ~ - i k_i |k|^-2, n -> oo\n"
    "where\n"
    "  s(k) = sin(2 pi k / n)\n"
    "\n"
    "Conventions:\n"
    "  w = exp(2 pi i / N)\n"
    "  fftw_forward(f(x), k) = Sum_x w^(-k.x) f(x),\n"
    "  fftw_backward(f(k), x) = Sum_k w^(+k.x) f(k),\n"
    "  f(x) = 1/n fftw_backward(fftw_forward(f(x), k), x)\n"
    "  backward(forward(fx) = Sum_k exp(+(2 pi i/ N) k.x) f(x)\n"
    "  gradient  = 1/2 (delta(x, x + e_i) - delta(x, x - e_i))\n"
    "  Laplacian = Sum_i (delta(x, x + e_i) - 2 delta(x, x) + delta(x, x - e_i)\n"
    "\n";

bool do_transposed_order = false;
bool do_check = false;
const double pi = 3.14159265358979323846;


///
// Floating point comparison based on number of 
// A tolerance of 1 corresponds to a relative difference of 1 part
// in 2^53 ~ 10^-16.
///
static inline bool isclose(complex_t a, complex_t b)
{
    int tolerance = 20;
    return fp_complex_isclose(a, b, tolerance);
}


// A delta function
void assign_array(complex_t *a, int n[], int nproc[], int self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                a[local_index] = 0.0;
                ++local_index;
            }
        }
    }
    if (0 == self[0] && 0 == self[1] && 0 == self[2]) {
        a[0] = 1.0;
    }
}

// check that each local array element is correct...
void check_array_is_one_over_r(double scale, complex_t *a, int n[], int nproc[], int self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                int j0 = i0 + self[0] * (n[0] / nproc[0]);
                int j1 = i1 + self[1] * (n[1] / nproc[1]);
                int j2 = i2 + self[2] * (n[2] / nproc[2]);
                if (local_index == 0 && 0 == self[0] && 0 == self[1] && 0 == self[2]) {
                    ;
                } else if ((j0 < n[0] / 2) && (j1 < n[1] / 2) && (j2 < n[2] / 2)) {
                    complex_t x = 0.0;
                    x += (double) j0 * (double) j0;
                    x += (double) j1 * (double) j1;
                    x += (double) j2 * (double) j2;
                    x = scale / sqrt(x);

                    // if (!isclose(a[local_index], x)) {
                    if (1) {
                        fprintf(stderr,
                                "data[%d, %d, %d] = (%f, %f) -- should be (%f, %f)\n",
                                j0, j1, j2,
                                real(a[local_index]),
                                imag(a[local_index]),
                                real(x),
                                imag(x));
                    }
                }
                ++local_index;
            }
        }
    }
}


void print_array_slice(complex_t *a, int n[], int nproc[], int self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    FILE *fp = fopen("plot.in", "w");
    if (!fp) {
        perror("fopen");
    }
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                int j0 = i0 + self[0] * (n[0] / nproc[0]);
                int j1 = i1 + self[1] * (n[1] / nproc[1]);
                int j2 = i2 + self[2] * (n[2] / nproc[2]);
                if (j0 == 0 && j1 == 0) {
                    fprintf(fp, "%d %f\n", j2, real(a[local_index]));
                }
                ++local_index;
            }
        }
    }
    fclose(fp);
    fprintf(stderr, "Array slice printed to plot.in\n");
}


///
// Solve for the potential by applying the Green's function to the
// density (in k-space)
//   d             data distribution descriptor
//   rho           density (input)
//   phi           potential (output)
//   green         cached values of the Green's function:
//                 1 / (2 * (Sum_i cos(2 pi k_i / n) - 3))
///
void solve(const distribution_t *d,
           const complex_t *rho,
           complex_t *phi,
           const double *green)
{
    int k[3];
    int limits[3];
    int index;
    double inverse_volume;

    inverse_volume = 1.0;
    for (int i = 0; i < 3; ++i) {
        inverse_volume /= (double) d->n[i];
        limits[i] = d->n[i] / d->process_topology_1.nproc[i];
    }

    index = 0;
    for (int local_k0 = 0; local_k0 < limits[0]; ++local_k0) {
        k[0] = local_k0 + d->process_topology_1.self[0] * limits[0];
        for (k[1] = 0; k[1] < limits[1]; ++k[1]) {
            for (k[2] = 0; k[2] < limits[2]; ++k[2]) {
                phi[index] = green[index] * rho[index] * inverse_volume;
                index++;
            }
            index += d->padding[2];
        }
        index += d->padding[1];
    }
}


///
// Solve for the gradient of the potential along the given axis by
// applying the derivative Green's function to the density (in
// k-space)
//   d             data distribution descriptor
//   axis          the axis along which to take the gradient
//   rho           density (input)
//   grad_phi      the gradient of the potential (output)
//   sine          cached values of sin(2 pi k / n)
//   green         cached values of the Green's function:
//                 1 / (2 * (Sum_i cos(2 pi k_i / n) - 3))
///
void solve_gradient(const distribution_t *d,
                    int axis,
                    const complex_t *rho,
                    complex_t *grad_phi,
                    const double *green,
                    const double *sine)
{
    int k[3];
    int limits[3];
    int index;
    double inverse_volume;

    inverse_volume = 1.0;
    for (int i = 0; i < 3; ++i) {
        inverse_volume /= (double) d->n[i];
        limits[i] = d->n[i] / d->process_topology_1.nproc[i];
    }

    index = 0;
    for (int local_k0 = 0; local_k0 < limits[0]; ++local_k0) {
        k[0] = local_k0 + d->process_topology_1.self[0] * limits[0];
        for (k[1] = 0; k[1] < limits[1]; ++k[1]) {
            for (k[2] = 0; k[2] < limits[2]; ++k[2]) {
                grad_phi[index] = - I * sine[k[axis]] * green[index] * rho[index] * inverse_volume;
                index++;
            }
            index += d->padding[2];
        }
        index += d->padding[1];
    }
}


///
// Allocate and pre-calculate isotropic Green's function (1D
// distribution) and trigonometric factors:
//   1 / (2 * (Sum_i cos(2 pi k_i / n) - 3))
//
//   d             data distribution descriptor
//   greenp        Green's function (output)
//   cosinep       cos(2 pi k / n)
//   sinep         sin(2 pi k / n)
///
void green_init(const distribution_t *d,
                double **greenp,
                double **cosinep,
                double **sinep)
{
    double kstep;
    double *c;
    double *g;
    double *s;
    int index;
    int k[3];
    int limits[3];
    size_t local_size;

    // allocate space
    local_size = 1.0;
    for (int i = 0; i < 3; ++i) {
        local_size *= (d->n[i] / d->process_topology_3.nproc[i]);
    }
    c = (double *) malloc(sizeof(double) * d->n[0]);
    s = (double *) malloc(sizeof(double) * d->n[0]);
    g = (double *) malloc(sizeof(double) * local_size);
    if (!c || !s || !g) {
        perror("malloc");
    }
    if (!s) {
        perror("malloc");
    }

    // cache trigonometric factors
    kstep = 2.0 * pi / (double) d->n[0];
    for (int k = 0; k < d->n[0]; ++k) {
        c[k] = cos(k * kstep);
        s[k] = sin(k * kstep);
    }

    // cache isotropic Green's function (1D distribution)
    limits[0] = d->n[0] / d->process_topology_1.nproc[0];
    limits[1] = d->n[1] / d->process_topology_1.nproc[1];
    limits[2] = d->n[2] / d->process_topology_1.nproc[2];
    index = 0;
    for (int local_k0 = 0; local_k0 < limits[0]; ++local_k0) {
        k[0] = local_k0 + d->process_topology_1.self[0] * limits[0];
        for (k[1] = 0; k[1] < limits[1]; ++k[1]) {
            for (k[2] = 0; k[2] < limits[2]; ++k[2]) {
                g[index] = 0.5 / (c[k[0]] + c[k[1]] + c[k[2]] - 3.0);
                index++;
            }
            index += d->padding[2];
        }
        index += d->padding[1];
    }
    // handle the pole
    if (d->process_topology_1.self[0] == 0) {
        g[0] = 0.0;
    }

    *greenp = g;
    *sinep = s;
    *cosinep = c;
}


///
// Free pre-calculated Green's function
///
void green_fini(const distribution_t *d,
                double **greenp,
                double **cosinep,
                double **sinep)
{
    free(*greenp);
    free(*cosinep);
    free(*sinep);
}


void usage(const char *name)
{
    fprintf(stderr, "Usage: %s [-n <grid size> -r <number of repetitions> -t]\n", name);
    fprintf(stderr, description);
}


int main(int argc, char *argv[])
{
    MPI_Comm comm;
    distribution_t d[1];   // distribution descriptor
    double *cosine;
    double *green;
    double *sine;
    complex_t *buf1;
    complex_t *buf2;
    complex_t *buf3;
    complex_t *buf4;
    complex_t *grad_phi[3];
    complex_t *phi;
    complex_t *rho;
    double time;
    extern int errno;
    fftw_plan plan_b;
    fftw_plan plan_f;
    int flags_b;
    int flags_f;
    int n[3] = { 8, 8, 8 };
    int nproc;
    int repetitions = 10;
    int self;
    size_t local_size;

    // MPI initalization
    MPI_Init(&argc, &argv);
    MPI_Comm_dup(MPI_COMM_WORLD, &comm);
    MPI_Comm_rank(comm, &self);
    MPI_Comm_size(comm, &nproc);

    // process arguments
    for (int c = 0; c != -1; c = getopt(argc, argv, "htn:r:")) {
        errno = 0;
        if (c == 'n') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            n[0] = n[1] = n[2] = (int) value;
        } else if (c == 'r') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            repetitions = (int) value;
        } else if (c == 't') {
            do_transposed_order = true;
        } else if (c == 'h') {
            if (0 == self) {
                usage(argv[0]);
            }
            MPI_Finalize();
            exit(0);
        } else if (c == 0) {
            continue;
        } else {
            MPI_Finalize();
            exit(1);
        }
    }
    argc -= optind;
    argv += optind;
    if (0 == self) {
        fprintf(stderr, description);
        fprintf(stderr,
                "Array dimensions: %d X %d X %d\n",
                n[0], n[1], n[2]);
        fprintf(stderr,
                "FFT uses transposed order: %s\n",
                do_transposed_order ? "yes" : "no");
    }

    // other initialization
    distribution_init(comm, n, n, d, false);
    distribution_assert_commensurate(d);
    fftw_mpi_init();

    // allocate buffers
    local_size = 1.0;
    for (int i = 0; i < 3; ++i) {
        local_size *= (n[i] / d->process_topology_3.nproc[i]);
    }
    buf1 = (complex_t *) fftw_malloc(sizeof(complex_t) * local_size);
    buf2 = (complex_t *) fftw_malloc(sizeof(complex_t) * local_size);
    buf3 = (complex_t *) fftw_malloc(sizeof(complex_t) * local_size);
    buf4 = (complex_t *) fftw_malloc(sizeof(complex_t) * local_size);
    rho = (complex_t *) malloc(sizeof(complex_t) * local_size);
    phi = (complex_t *) malloc(sizeof(complex_t) * local_size);
    grad_phi[0] = (complex_t *) malloc(sizeof(complex_t) * local_size);
    grad_phi[1] = (complex_t *) malloc(sizeof(complex_t) * local_size);
    grad_phi[2] = (complex_t *) malloc(sizeof(complex_t) * local_size);
    if (!rho || !phi ||
        !grad_phi[0] || !grad_phi[1] || !grad_phi[2] ||
        !buf1 || !buf2 || !buf3 || !buf4) {
        perror("malloc");
    }

    // create plan for forward and backward DFT's
    flags_f = flags_b = FFTW_ESTIMATE;
    if (do_transposed_order) {
        flags_f |= FFTW_MPI_TRANSPOSED_OUT;
        flags_b |= FFTW_MPI_TRANSPOSED_IN;
    }
    plan_f = fftw_mpi_plan_dft_3d(d->n[0], d->n[1], d->n[2], buf1, buf2, comm, FFTW_FORWARD, flags_f);
    plan_b = fftw_mpi_plan_dft_3d(d->n[0], d->n[1], d->n[2], buf3, buf4, comm, FFTW_BACKWARD, flags_b);

    // allocate and precalculate Green's function and trigonometric factors
    green_init(d, &green, &cosine, &sine);

    // initialize rho in a 3d decomposition
    assign_array(rho, n, d->process_topology_3.nproc, d->process_topology_3.self);

    // solve
    time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        distribution_3_to_1(rho, buf1, d);
        fftw_execute(plan_f);                                   // buf1 --> buf2

        // solve for field
        solve(d, buf2, buf3, green);                            // buf2 --> buf3
        fftw_execute(plan_b);                                   // buf3 --> buf4
        distribution_1_to_3(buf4, phi, d);

        // solve for gradient of field
        for (int axis = 0; axis < 3; ++axis) {
            solve_gradient(d, axis, buf2, buf3, green, sine);   // buf2 --> buf3
            fftw_execute(plan_b);                               // buf3 --> buf4
            distribution_1_to_3(buf4, grad_phi[axis], d);
        }
        MPI_Barrier(comm);
    }
    time = MPI_Wtime() - time;
    time /= (2.0 * repetitions);

    // check
    if (do_check) {
        double scale = 1.0;
        for (int i = 0; i < 3; ++i) {
            scale *= d->n[i];
        }
        scale = 4.0 * pi;
        check_array_is_one_over_r(scale, phi, n, d->process_topology_3.nproc, d->process_topology_3.self);
    }

    if (0 == self) {
        print_array_slice(phi, n, d->process_topology_3.nproc, d->process_topology_3.self);
    }

    if (0 == self) {
        fprintf(stderr, "Results (%d repetitions):\n", repetitions);
        fprintf(stderr, "Grid size\tNumber of processes\tTime (s)\n");
        fprintf(stderr, "%-8d\t%-8d\t\t%8g\n", n[0], nproc, time);
    }

    // clean up
    fftw_destroy_plan(plan_f);
    fftw_destroy_plan(plan_b);
    free(buf1);
    free(buf2);
    free(buf3);
    free(buf4);
    free(rho);
    free(phi);
    free(grad_phi[0]);
    free(grad_phi[1]);
    free(grad_phi[2]);
    green_fini(d, &green, &cosine, &sine);
    distribution_fini(d);

    MPI_Finalize();

    return 0;
}
