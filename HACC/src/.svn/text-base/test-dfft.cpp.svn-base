#include <getopt.h>
#include <mpi.h>
#include <errno.h>
#include <stdint.h>

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>

#include "fp.h"
#include "dfft.hpp"

const char *description =
    "\n"
    "TEST: FFTW, 3-d data distribution, solver\n"
    "\n"
    "FFTW MPI transform, combined with a 1-d <--> 3-d\n"
    "data redistribution so that it can be applied directly\n"
    "to problems requiring a 3-d data distribution\n"
    "\n";

///
// Floating point comparison based on number of
// A tolerance of 1 corresponds to a relative difference of 1 part
// in 2^53 ~ 10^-16.
///
static inline bool isclose(complex_t a, complex_t b)
{
    int tolerance = 20;
    return fp_complex_isclose(a, b, tolerance);
}

void assign_array_to_delta_function(complex_t *a, int const n[], int const nproc[], int const self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                a[local_index] = 0.0;
                ++local_index;
            }
        }
    }
    if (0 == self[0] && 0 == self[1] && 0 == self[2]) {
        a[0] = 1.0;
    }
}


void check_array_is_constant(double scale, complex_t *a,
                             int const n[], int const nproc[], int const self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                int j0 = i0 + self[0] * (n[0] / nproc[0]);
                int j1 = i1 + self[1] * (n[1] / nproc[1]);
                int j2 = i2 + self[2] * (n[2] / nproc[2]);
                if (!isclose(a[local_index], scale)) {
                    fprintf(stderr,
                            "data[%d, %d, %d] = (%f, %f) -- should be (%f, 0.0)\n",
                            j0, j1, j2,
                            real(a[local_index]),
                            imag(a[local_index]),
                            scale);
                }
                ++local_index;
            }
        }
    }
}


void check_array_is_delta_function(double scale, complex_t *a,
                                   int const n[], int const nproc[], int const self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                int j0 = i0 + self[0] * (n[0] / nproc[0]);
                int j1 = i1 + self[1] * (n[1] / nproc[1]);
                int j2 = i2 + self[2] * (n[2] / nproc[2]);
                if (local_index == 0 && 0 == self[0] && 0 == self[1] && 0 == self[2]) {
                    if (!isclose(a[local_index], scale)) {
                        fprintf(stderr,
                                "data[%d, %d, %d] = (%f, %f) -- should be (%f, 0.0)\n",
                                j0, j1, j2,
                                real(a[local_index]),
                                imag(a[local_index]),
                                scale);
                    }
                } else {
                    if (!isclose(a[local_index], 0.0)) {
                        fprintf(stderr,
                                "data[%d, %d, %d] = (%f, %f) -- should be (0.0, 0.0)\n",
                                j0, j1, j2,
                                real(a[local_index]),
                                imag(a[local_index]));
                    }
                }
                ++local_index;
            }
        }
    }
}


void test(MPI_Comm comm, int const n[], int repetitions)
{
    std::vector<complex_t> a;
    std::vector<complex_t> b;
    bool do_check = true;

    Dfft dfft(comm, n);
    double scale = static_cast<double>(dfft.global_size());

    a.resize(dfft.local_size());
    b.resize(dfft.local_size());

    // First some sanity checks

    if (do_check) {
        assign_array_to_delta_function(&a[0], n, dfft.nproc_3d(), dfft.self_3d());
        dfft.forward(a, b);
        check_array_is_constant(1.0, &b[0], n, dfft.nproc_3d(), dfft.self_3d());
        dfft.backward(b, a);
        check_array_is_delta_function(scale, &a[0], n, dfft.nproc_3d(), dfft.self_3d());
    }

    // Now some timing

    dfft.forward(a, b);
    dfft.backward(b, a);
    MPI_Barrier(comm);
    double time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        dfft.forward(a, b);
        dfft.backward(b, a);
    }
    MPI_Barrier(comm);
    time = MPI_Wtime() - time;
    time /= 2.0 * double(repetitions);

    // results
    if (0 == dfft.self()) {
        fprintf(stderr, "Results (%d repetitions):\n", repetitions);
        fprintf(stderr, "Grid size\tNumber of processes\tTime (s)\n");
        fprintf(stderr, "%-8d\t%-8d\t\t%8g\n", n[0], dfft.nproc(), time);
    }
}


void usage(const char *name)
{
    fprintf(stderr, "Usage: %s [-n <grid size> -r <number of repetitions> -t]\n", name);
    fprintf(stderr, description);
}


///
// process arguments
///
void get_options(int argc, char *argv[],
                 int n[3],
                 int & repetitions)
{
    int self;

    MPI_Comm_rank(MPI_COMM_WORLD, &self);

    for (int c = 0; c != -1; c = getopt(argc, argv, "htn:r:")) {
        errno = 0;
        if (c == 'n') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            n[0] = n[1] = n[2] = static_cast<int>(value);
        } else if (c == 'r') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            repetitions = static_cast<int>(value);
        } else if (c == 'h') {
            if (0 == self) {
                usage(argv[0]);
            }
            MPI_Finalize();
            exit(0);
        } else if (c == 0) {
            continue;
        } else {
            MPI_Finalize();
            exit(1);
        }
    }
}


int main(int argc, char *argv[])
{
    int n[3] = { 8, 8, 8 };
    int repetitions = 10;

    MPI_Init(&argc, &argv);
    get_options(argc, argv, n, repetitions);
    test(MPI_COMM_WORLD, n, repetitions);
    MPI_Finalize();

    return 0;
}
