#include <assert.h>
#include <errno.h>
#include <getopt.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <mpi.h>

#include "complex-type.h"
#include "fp.h"
#include "distribution.h"

char *description = 
    "TEST: 3-d data distribution, global index\n"
    "\n"
    "A 1-d <--> 3-d\n data redistribution intended for FFTW\n"
    "\n"
    "This test initializes the field to the value of its\n"
    "global coordinate for thorough checking of the redistribution\n"
    "functions. Checks that the data is correct are performed\n"
    "before and after each data redistribution\n"
    "\n";

bool do_check = true;
bool do_print = false;

///
// Compare floating point numbers based on the number of representable
// floating point numbers between them.
//
// A tolerance of 1 corresponds to a relative difference of 1 part
// in 2^53 ~ 10^-16.
///
static inline bool isclose(complex_t a, complex_t b)
{
    int tolerance = 20;
    return fp_complex_isclose(a, b, tolerance);
}



void usage(const char *name)
{
    fprintf(stderr, "Usage: %s [-n <grid size>]\n", name);
}

int main(int argc, char *argv[])
{
    int n[3] = { 8, 8, 8 };

    distribution_t d[1];     // distribution descriptor

    // MPI initalization
    MPI_Init(&argc, &argv);
//TEST DIMENSIONS.
    int ndim=3;
    int period[3];
    int nproc;

    // process arguments
    for (int c = 0; c != -1; c = getopt(argc, argv, "hn:p:")) {
        errno = 0;
        if (c == 'n') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
            }
            n[0] = n[1] = n[2] = nproc = (int) value;

        } else if (c == 'h') {
                usage(argv[0]);
            MPI_Finalize();
            exit(0);
        } else if (c == 'p') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
            }
            nproc = (int) value;
        } else if (c == 0) {
            continue;
        } else {
            MPI_Finalize();
            exit(1);
        }
    }
    argc -= optind;
    argv += optind;
    fprintf(stderr, description);
    fprintf(stderr,"Array dimensions: %d X %d X %d NUMBER OF PROCS = %d\n",n[0], n[1], n[2],nproc);
    //double memory_points=(n[0]*n[1]*n[2]*128)/1024/1024/1024;
    float memory_points=(((float)n[0]*n[1]*n[2]*128/1024)/1024)/1024;
    fprintf(stderr,"\nMEMORY THIS TOTAL CUBE REQUIRES IS =%f\n",memory_points);
    memory_points=memory_points/2;
    fprintf(stderr,"\nMINIMUM NUMBER OF NODES REQUIRES IS =%f\n",memory_points);
    if(memory_points > nproc)fprintf(stderr,"CURRENT NUMBER OF NPROC (%d) IS TOO SMALL!!\n",nproc);
    else fprintf(stderr,"CURRENT NUMBER OF NPROC (%d) SEEMS LARGE ENOUGH...\n",nproc);
//MAKE CUBE.
    d->process_topology_3.nproc[0] = 0;
    d->process_topology_3.nproc[1] = 0;
    d->process_topology_3.nproc[2] = 0;
    period[0] = period[1] = period[2] = 1;
    MPI_Dims_create(nproc, ndim, d->process_topology_3.nproc);

    d->process_topology_3.n[0] = n[0] / d->process_topology_3.nproc[0];//set local dimensions
    d->process_topology_3.n[1] = n[1] / d->process_topology_3.nproc[1];
    d->process_topology_3.n[2] = n[2] / d->process_topology_3.nproc[2];
    fprintf(stderr, "\nDimensions of the cube: NUMBER OF PROCS (%d,%d,%d) DIMENSIONS OF POINTS (%d,%d,%d)\n",d->process_topology_3.nproc[0],d->process_topology_3.nproc[1],d->process_topology_3.nproc[2],
           d->process_topology_3.n[0],d->process_topology_3.n[1],d->process_topology_3.n[2]);
    assert(n[0]%d->process_topology_3.nproc[0]==0);
    assert(n[0]%d->process_topology_3.nproc[1]==0);
    assert(n[0]%d->process_topology_3.nproc[2]==0);

//MAKE Z PENCILS
    d->process_topology_2_z.nproc[0] = 0;
    d->process_topology_2_z.nproc[1] = 0;
    d->process_topology_2_z.nproc[2] = 1; // don't distribute outer dimension
    period[0] = period[1] = period[2] = 1;
    MPI_Dims_create(nproc, ndim, d->process_topology_2_z.nproc);
    d->process_topology_2_z.n[0] = n[0] / d->process_topology_2_z.nproc[0];
    d->process_topology_2_z.n[1] = n[1] / d->process_topology_2_z.nproc[1];
    d->process_topology_2_z.n[2] = n[2] / d->process_topology_2_z.nproc[2];
    bool check_z_dims=false; //variable used to ensure that pencils created fit inside the cuboids, if not the code will assert out.
    if(d->process_topology_2_z.n[0] != 0 && d->process_topology_2_z.n[1] != 0 && d->process_topology_2_z.n[2] != 0){// protects from dividing by zero.
      check_z_dims=((d->process_topology_3.n[0]) % (d->process_topology_2_z.n[0]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_z.n[1]) == 0) && (n[0] % (d->process_topology_2_z.nproc[0]) == 0) && (n[0] % (d->process_topology_2_z.nproc[1]) == 0);
     
      if(!check_z_dims)fprintf(stderr,"Need to fix Z PENCILS z_procs(%d,%d,%d) 3d.ns(%d,%d,%d) 2d_z.ns(%d,%d,%d).... \n", d->process_topology_2_z.nproc[0],d->process_topology_2_z.nproc[1],d->process_topology_2_z.nproc[2], d->process_topology_3.n[0],d->process_topology_3.n[1],d->process_topology_3.n[2],d->process_topology_2_z.n[0],d->process_topology_2_z.n[1],d->process_topology_2_z.n[2]);

//try swaping pencil dimensions if current setup pencil dimensions dont fit inside the cubes.
       if(!(check_z_dims) && ((d->process_topology_3.n[0]) % (d->process_topology_2_z.n[1]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_z.n[0]) == 0)){

         fprintf(stderr,"Swaping Z pencils in initialization  (%d,%d,%d).... \n", d->process_topology_2_z.nproc[0],d->process_topology_2_z.nproc[1],d->process_topology_2_z.nproc[2]);
         int temp=d->process_topology_2_z.nproc[0];
         d->process_topology_2_z.nproc[0] = d->process_topology_2_z.nproc[1];
         d->process_topology_2_z.nproc[1] = temp;
         d->process_topology_2_z.nproc[2] = d->process_topology_2_z.nproc[2];

         d->process_topology_2_z.n[0] = n[0] / d->process_topology_2_z.nproc[0];
         d->process_topology_2_z.n[1] = n[1] / d->process_topology_2_z.nproc[1];
         d->process_topology_2_z.n[2] = n[2] / d->process_topology_2_z.nproc[2];
         check_z_dims=((d->process_topology_3.n[0]) % (d->process_topology_2_z.n[0]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_z.n[1]) == 0) && (n[0] % (d->process_topology_2_z.nproc[0]) == 0) && (n[0] % (d->process_topology_2_z.nproc[1]) == 0);
      }
    }
    else {
      check_z_dims=false;
    }
    if(!check_z_dims){
       fprintf(stderr,"MAKING Z PENCILS FIT zprocs(%d,%d,%d) z.ns(%d,%d,%d).... \n", d->process_topology_2_z.nproc[0],d->process_topology_2_z.nproc[1],d->process_topology_2_z.nproc[2],
         d->process_topology_2_z.n[0],d->process_topology_2_z.n[1],d->process_topology_2_z.n[2]);

      d->process_topology_2_z.nproc[2]=1;
      if(d->process_topology_3.n[0]>d->process_topology_3.n[1]){
        d->process_topology_2_z.nproc[1]=d->process_topology_3.nproc[1]*d->process_topology_3.nproc[2];
        d->process_topology_2_z.nproc[0]=d->process_topology_3.nproc[0];
        if((n[0] % (d->process_topology_2_z.nproc[0]) != 0) || (n[0] % (d->process_topology_2_z.nproc[1]) != 0)){

          d->process_topology_2_z.nproc[0]=d->process_topology_3.nproc[0]*d->process_topology_3.nproc[2];
          d->process_topology_2_z.nproc[1]=d->process_topology_3.nproc[1];
        }

      }
      else{
        d->process_topology_2_z.nproc[0]=d->process_topology_3.nproc[0]*d->process_topology_3.nproc[2];
        d->process_topology_2_z.nproc[1]=d->process_topology_3.nproc[1];
        if((n[0] % (d->process_topology_2_z.nproc[0]) != 0) || (n[0] % (d->process_topology_2_z.nproc[1]) != 0)){
          d->process_topology_2_z.nproc[1]=d->process_topology_3.nproc[1]*d->process_topology_3.nproc[2];
          d->process_topology_2_z.nproc[0]=d->process_topology_3.nproc[0];
        }
      }
       d->process_topology_2_z.n[0] = n[0] / d->process_topology_2_z.nproc[0];
       d->process_topology_2_z.n[1] = n[1] / d->process_topology_2_z.nproc[1];
       d->process_topology_2_z.n[2] = n[2] / d->process_topology_2_z.nproc[2];
       fprintf(stderr,"MAKING Z PENCILS FIT AFTER zprocs(%d,%d,%d) z.ns(%d,%d,%d).... \n", d->process_topology_2_z.nproc[0],d->process_topology_2_z.nproc[1],d->process_topology_2_z.nproc[2],
         d->process_topology_2_z.n[0],d->process_topology_2_z.n[1],d->process_topology_2_z.n[2]);
      if(d->process_topology_2_z.n[0] != 0 && d->process_topology_2_z.n[1] != 0 && d->process_topology_2_z.n[2] != 0){// protects from dividing by zero.
        check_z_dims=((d->process_topology_3.n[0]) % (d->process_topology_2_z.n[0]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_z.n[1]) == 0) && (n[0] % (d->process_topology_2_z.nproc[0]) == 0) && (n[0] % (d->process_topology_2_z.nproc[1]) == 0);
      }
      else {
        check_z_dims=false;
      }
    }
    assert(check_z_dims);
    fprintf(stderr, "\nDimensions of the Z-PENCIL: NUMBER OF PROCS (%d,%d,%d) DIMENSIONS OF POINTS (%d,%d,%d)\n",d->process_topology_2_z.nproc[0],d->process_topology_2_z.nproc[1],d->process_topology_2_z.nproc[2], d->process_topology_2_z.n[0],d->process_topology_2_z.n[1],d->process_topology_2_z.n[2]);
 
//MAKING X PENICLS
    d->process_topology_2_x.nproc[0] = 1; // don't distribute outer dimension
    d->process_topology_2_x.nproc[1] = 0;
    d->process_topology_2_x.nproc[2] = 0;
    period[0] = period[1] = period[2] = 1;
    MPI_Dims_create(nproc, ndim, d->process_topology_2_x.nproc);
    d->process_topology_2_x.n[0] = n[0] / d->process_topology_2_x.nproc[0];
    d->process_topology_2_x.n[1] = n[1] / d->process_topology_2_x.nproc[1];
    d->process_topology_2_x.n[2] = n[2] / d->process_topology_2_x.nproc[2];
    bool check_x_dims=false;//variable used to ensure that pencils created fit inside the cuboids, if not the code will assert out.
    if(d->process_topology_2_x.n[0] != 0 && d->process_topology_2_x.n[1] != 0 && d->process_topology_2_x.n[2] != 0){// protects from dividing by zero.
       check_x_dims=((d->process_topology_3.n[2]) % (d->process_topology_2_x.n[2]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_x.n[1]) == 0) && (n[0] % (d->process_topology_2_x.nproc[2]) == 0) && (n[0] % (d->process_topology_2_x.nproc[0]) == 0);
       if(!check_x_dims)fprintf(stderr,"Need to fix X PENCILS x_procs(%d,%d,%d) 3d.ns(%d,%d,%d) 2d_x.ns(%d,%d,%d).... \n", d->process_topology_2_x.nproc[0],d->process_topology_2_x.nproc[1],d->process_topology_2_x.nproc[2],d->process_topology_3.n[0],d->process_topology_3.n[1],d->process_topology_3.n[2],d->process_topology_2_x.n[0],d->process_topology_2_x.n[1],d->process_topology_2_x.n[2]);

//try swaping pencil dimensions if current setup does not have pencils that fit inside cubes.
        if(!(check_x_dims) && ((d->process_topology_3.n[2]) % (d->process_topology_2_x.n[1]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_x.n[2]) == 0)){
          fprintf(stderr,"Swaping X pencils in initialization .... \n");
          d->process_topology_2_x.nproc[0] = d->process_topology_2_x.nproc[0];
          int temp=d->process_topology_2_x.nproc[1];
          d->process_topology_2_x.nproc[1] = d->process_topology_2_x.nproc[2];
          d->process_topology_2_x.nproc[2] = temp;

          d->process_topology_2_x.n[0] = n[0] / d->process_topology_2_x.nproc[0];
          d->process_topology_2_x.n[1] = n[1] / d->process_topology_2_x.nproc[1];
          d->process_topology_2_x.n[2] = n[2] / d->process_topology_2_x.nproc[2];
          check_x_dims=((d->process_topology_3.n[2]) % (d->process_topology_2_x.n[2]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_x.n[1]) == 0) && (n[0] % (d->process_topology_2_x.nproc[2]) == 0) && (n[0] % (d->process_topology_2_x.nproc[0]) == 0);

       }
    }
    else{
      check_x_dims=false;
    }
    //if that did not work, make a pencil that does by taking the cuboid (np1,np2,np3) and making pencils of the form (1,np2*np1,np3) or (1,np2*np1,np3) depending on the most even distribution it can.
    if(!check_x_dims){
       fprintf(stderr,"MAKING X PENCILS FIT xprocs(%d,%d,%d) x.ns(%d,%d,%d).... \n", d->process_topology_2_x.nproc[0],d->process_topology_2_x.nproc[1],d->process_topology_2_x.nproc[2],
         d->process_topology_2_x.n[0],d->process_topology_2_x.n[1],d->process_topology_2_x.n[2]);

      d->process_topology_2_x.nproc[0]=1;
      if(d->process_topology_3.nproc[2]>d->process_topology_3.nproc[1]){
        d->process_topology_2_x.nproc[1]=d->process_topology_3.nproc[1]*d->process_topology_3.nproc[0];
        d->process_topology_2_x.nproc[2]=d->process_topology_3.nproc[2];
        if((n[0] % (d->process_topology_2_x.nproc[2]) != 0) || (n[0] % (d->process_topology_2_x.nproc[0]) != 0)){
          d->process_topology_2_x.nproc[2]=d->process_topology_3.nproc[2]*d->process_topology_3.nproc[0];
          d->process_topology_2_x.nproc[1]=d->process_topology_3.nproc[1];
        }

      }
      else{
        d->process_topology_2_x.nproc[2]=d->process_topology_3.nproc[2]*d->process_topology_3.nproc[0];
        d->process_topology_2_x.nproc[1]=d->process_topology_3.nproc[1];
        if((n[0] % (d->process_topology_2_x.nproc[2]) != 0) || (n[0] % (d->process_topology_2_x.nproc[0]) != 0)){
           d->process_topology_2_x.nproc[1]=d->process_topology_3.nproc[1]*d->process_topology_3.nproc[0];
           d->process_topology_2_x.nproc[2]=d->process_topology_3.nproc[2];
         }
      }
       d->process_topology_2_x.n[0] = n[0] / d->process_topology_2_x.nproc[0];
       d->process_topology_2_x.n[1] = n[1] / d->process_topology_2_x.nproc[1];
       d->process_topology_2_x.n[2] = n[2] / d->process_topology_2_x.nproc[2];
       fprintf(stderr,"MAKING X PENCILS FIT AFTER xprocs(%d,%d,%d) x.ns(%d,%d,%d).... \n", d->process_topology_2_x.nproc[0],d->process_topology_2_x.nproc[1],d->process_topology_2_x.nproc[2],d->process_topology_2_x.n[0],d->process_topology_2_x.n[1],d->process_topology_2_x.n[2]);
      if(d->process_topology_2_x.n[0] != 0 && d->process_topology_2_x.n[1] != 0 && d->process_topology_2_x.n[2] != 0){// protects from dividing by zero.
        check_x_dims=((d->process_topology_3.n[2]) % (d->process_topology_2_x.n[2]) == 0) && ((d->process_topology_3.n[1]) % (d->process_topology_2_x.n[1]) == 0) && (n[0] % (d->process_topology_2_x.nproc[2]) == 0) && (n[0] % (d->process_topology_2_x.nproc[0]) == 0);
      }
      else{
          check_x_dims=false;
      }

    }
    assert(check_x_dims);
    fprintf(stderr, "\nDimensions of the X-PENCIL: NUMBER OF PROCS (%d,%d,%d) DIMENSIONS OF POINTS (%d,%d,%d)\n",d->process_topology_2_x.nproc[0],d->process_topology_2_x.nproc[1],d->process_topology_2_x.nproc[2], d->process_topology_2_x.n[0],d->process_topology_2_x.n[1],d->process_topology_2_x.n[2]);

//MAKING Y PENCILS
    d->process_topology_2_y.nproc[0] = 0;
    d->process_topology_2_y.nproc[1] = 1; // don't distribute outer dimension
    d->process_topology_2_y.nproc[2] = 0;
    period[0] = period[1] = period[2] = 1;
    MPI_Dims_create(nproc, ndim, d->process_topology_2_y.nproc);
    d->process_topology_2_y.n[0] = n[0] / d->process_topology_2_y.nproc[0];
    d->process_topology_2_y.n[1] = n[1] / d->process_topology_2_y.nproc[1];
    d->process_topology_2_y.n[2] = n[2] / d->process_topology_2_y.nproc[2];
    bool check_y_dims=false;//variable used to ensure that pencils created fit inside the cuboids, if not the code will assert out.
    if(d->process_topology_2_y.n[0] != 0 && d->process_topology_2_y.n[1] != 0 && d->process_topology_2_y.n[2] != 0){// protects from dividing by zero.
       check_y_dims=(((d->process_topology_3.n[2]) % (d->process_topology_2_y.n[2]) == 0) && ((d->process_topology_3.n[0]) % (d->process_topology_2_y.n[0]) == 0) && (n[0] % (d->process_topology_2_y.nproc[2]) == 0) && (n[0] % (d->process_topology_2_y.nproc[0]) == 0));
       if(!check_y_dims)fprintf(stderr,"Need to fix Y PENCILS y_procs(%d,%d,%d) 3d.ns(%d,%d,%d) 2d_y.ns(%d,%d,%d).... \n", d->process_topology_2_y.nproc[0],d->process_topology_2_y.nproc[1],d->process_topology_2_y.nproc[2],d->process_topology_3.n[0],d->process_topology_3.n[1],d->process_topology_3.n[2],d->process_topology_2_y.n[0],d->process_topology_2_y.n[1],d->process_topology_2_y.n[2]);
       //try swaping pencil dimensions if the current dimension of the pencils does not fit inside the cubes.
       if(!(check_y_dims) && ((d->process_topology_3.n[2]) % (d->process_topology_2_y.n[0]) == 0) && ((d->process_topology_3.n[0]) % (d->process_topology_2_y.n[2]) == 0)){

          fprintf(stderr,"Swaping Y pencils in initialization .... \n");

          int temp=d->process_topology_2_y.nproc[0];
          d->process_topology_2_y.nproc[0] = d->process_topology_2_y.nproc[2];
          d->process_topology_2_y.nproc[2] = temp;
          d->process_topology_2_y.nproc[1] = d->process_topology_2_y.nproc[1];

          d->process_topology_2_y.n[0] = n[0] / d->process_topology_2_y.nproc[0];
          d->process_topology_2_y.n[1] = n[1] / d->process_topology_2_y.nproc[1];
          d->process_topology_2_y.n[2] = n[2] / d->process_topology_2_y.nproc[2];
          check_y_dims=(((d->process_topology_3.n[2]) % (d->process_topology_2_y.n[2]) == 0) && ((d->process_topology_3.n[0]) % (d->process_topology_2_y.n[0]) == 0) && (n[0] % (d->process_topology_2_y.nproc[2]) == 0) && (n[0] % (d->process_topology_2_y.nproc[0]) == 0));
       }
    }
    else {
      check_y_dims=false;
    }    //if that did not work, make a pencil that does by taking the cuboid (np1,np2,np3) and making pencils of the form (np1,1,np3*np2) or (np1*np2,1,np3) depending on the most even distribution it can.
    if(!check_y_dims){
       fprintf(stderr,"MAKING Y PENCILS FIT yprocs(%d,%d,%d) y.ns(%d,%d,%d)...................................... \n",         d->process_topology_2_y.nproc[0],d->process_topology_2_y.nproc[1],d->process_topology_2_y.nproc[2],
         d->process_topology_2_y.n[0],d->process_topology_2_y.n[1],d->process_topology_2_y.n[2]);

      d->process_topology_2_y.nproc[1]=1;
      if(d->process_topology_3.nproc[2]>d->process_topology_3.nproc[0]){
        d->process_topology_2_y.nproc[0]=d->process_topology_3.nproc[0]*d->process_topology_3.nproc[1];
        d->process_topology_2_y.nproc[2]=d->process_topology_3.nproc[2];
        if((n[0] % (d->process_topology_2_y.nproc[2]) != 0) || (n[0] % (d->process_topology_2_y.nproc[0]) != 0)){
          d->process_topology_2_y.nproc[2]=d->process_topology_3.nproc[2]*d->process_topology_3.nproc[1];
          d->process_topology_2_y.nproc[0]=d->process_topology_3.nproc[0];
        }

      }
      else{
        d->process_topology_2_y.nproc[2]=d->process_topology_3.nproc[2]*d->process_topology_3.nproc[1];
        d->process_topology_2_y.nproc[0]=d->process_topology_3.nproc[0];
        if((n[0] % (d->process_topology_2_y.nproc[2]) != 0) || (n[0] % (d->process_topology_2_y.nproc[0]) != 0)){
          d->process_topology_2_y.nproc[0]=d->process_topology_3.nproc[0]*d->process_topology_3.nproc[1];
          d->process_topology_2_y.nproc[2]=d->process_topology_3.nproc[2];
        }
      }
       d->process_topology_2_y.n[0] = n[0] / d->process_topology_2_y.nproc[0];
       d->process_topology_2_y.n[1] = n[1] / d->process_topology_2_y.nproc[1];       d->process_topology_2_y.n[2] = n[2] / d->process_topology_2_y.nproc[2];
       fprintf(stderr,"MAKING Y PENCILS FIT AFTER yprocs(%d,%d,%d) y.ns(%d,%d,%d).... \n", d->process_topology_2_y.nproc[0],d->process_topology_2_y.nproc[1],d->process_topology_2_y.nproc[2],
         d->process_topology_2_y.n[0],d->process_topology_2_y.n[1],d->process_topology_2_y.n[2]);
       if(d->process_topology_2_y.n[0] != 0 && d->process_topology_2_y.n[1] != 0 && d->process_topology_2_y.n[2] != 0){// protects from dividing by zero.
          check_y_dims=(((d->process_topology_3.n[2]) % (d->process_topology_2_y.n[2]) == 0) && ((d->process_topology_3.n[0]) % (d->process_topology_2_y.n[0]) == 0) && (n[0] % (d->process_topology_2_y.nproc[2]) == 0) && (n[0] % (d->process_topology_2_y.nproc[0]) == 0));
       }
       else{
          check_y_dims=false;
       }
    }
    assert(check_y_dims);
    fprintf(stderr, "\nDimensions of the Y-PENCIL: NUMBER OF PROCS (%d,%d,%d) DIMENSIONS OF POINTS (%d,%d,%d)\n",d->process_topology_2_y.nproc[0],d->process_topology_2_y.nproc[1],d->process_topology_2_y.nproc[2], d->process_topology_2_y.n[0],d->process_topology_2_y.n[1],d->process_topology_2_y.n[2]);

    for (int i = 0; i < 3; ++i) {
       assert(0 == (n[i] % d->process_topology_2_x.nproc[i]));
       assert(0 == (n[i] % d->process_topology_2_y.nproc[i]));
       assert(0 == (n[i] % d->process_topology_2_z.nproc[i]));
    }
    fprintf(stderr, "\nNO ASSERTS SO LOOKS GOOD");
   
    return 0;
}
