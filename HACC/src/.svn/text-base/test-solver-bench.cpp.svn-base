#include <assert.h>
#include <errno.h>
#include <getopt.h>
#include <mpi.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "solver.hpp"

const char *description =
    "\n"
    "TEST: Benchmark for FFTW, 3-d data distribution, solver\n"
    "\n";

///
// A delta function
///
void assign_array(std::vector<complex_t> & a, int const n[], int const nproc[], int const self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                a[local_index] = 0.0;
                ++local_index;
            }
        }
    }
    if (0 == self[0] && 0 == self[1] && 0 == self[2]) {
        a[0] = 1.0;
    }
}


///
// Print a slice of the array to a file for plotting
///
void print_array_slice(std::vector<complex_t> const & a, int const n[], int const nproc[], int const self[])
{
    // Cartesian iteration over local data array
    int64_t local_index = 0;
    FILE *fp = fopen("plot.in", "w");
    if (!fp) {
        perror("fopen");
    }
    for (int i0 = 0; i0 < (n[0] / nproc[0]); ++i0) {
        for (int i1 = 0; i1 < (n[1] / nproc[1]); ++i1) {
            for (int i2 = 0; i2 < (n[2] / nproc[2]); ++i2) {
                int j0 = i0 + self[0] * (n[0] / nproc[0]);
                int j1 = i1 + self[1] * (n[1] / nproc[1]);
                int j2 = i2 + self[2] * (n[2] / nproc[2]);
                if (j0 == 0 && j1 == 0) {
                    fprintf(fp, "%d %f\n", j2, real(a[local_index]));
                }
                ++local_index;
            }
        }
    }
    fclose(fp);
    fprintf(stderr, "Array slice printed to plot.in\n");
}


void test(MPI_Comm comm, int n[], int repetitions)
{
    SolverDiscrete solver(comm, n[0]);
    std::vector<complex_t> rho;
    std::vector<complex_t> phi;
    double time;

    if (0 == solver.self()) {
        fprintf(stderr, description);
        fprintf(stderr, "Grid size:\t\t%d\n", n[0]);
        fprintf(stderr, "Number of processes:\t%d\n", solver.nproc());
        fprintf(stderr, "Repetitions:\t\t%d\n", repetitions);
        fprintf(stderr, "Operation\t\t\tTime (s)\n");
    }

    // allocate space
    rho.resize(solver.local_size());
    phi.resize(solver.local_size());

    assign_array(rho, n, solver.nproc_3d(), solver.self_3d());

    if (0 == solver.self()) {
    }

    // time redistribution 3->1
    MPI_Barrier(comm);
    time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        solver.redistribute_3_to_1(rho, phi);
    }
    time = MPI_Wtime() - time;
    time /= double(repetitions);
    if (0 == solver.self()) {
        fprintf(stderr, "distribute 3->1:\t\t%8g\n", time);
    }

    // time redistribution 1->3
    MPI_Barrier(comm);
    time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        solver.redistribute_1_to_3(phi, rho);
    }
    time = MPI_Wtime() - time;
    time /= double(repetitions);
    if (0 == solver.self()) {
        fprintf(stderr, "distribute 1->3:\t\t%8g\n", time);
    }

    // time the forward solve
    MPI_Barrier(comm);
    time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        solver.forward_solve(rho);
    }
    time = MPI_Wtime() - time;
    time /= double(repetitions);
    if (0 == solver.self()) {
        fprintf(stderr, "forward solve:\t\t\t%8g\n", time);
    }

    // time the backward solve
    MPI_Barrier(comm);
    time = MPI_Wtime();
    for (int i = 0; i < repetitions; ++i) {
        solver.backward_solve(phi);
    }
    time = MPI_Wtime() - time;
    time /= double(repetitions);
    if (0 == solver.self()) {
        fprintf(stderr, "backward solve:\t\t\t%8g\n", time);
    }

    // time the backward gradient solve along each axis
    for (int axis = 0; axis < 3; ++axis) {
        char c[3] = {'x', 'y', 'z'};
        MPI_Barrier(comm);
        time = MPI_Wtime();
        for (int i = 0; i < repetitions; ++i) {
            solver.backward_solve_gradient(axis, phi);
        }
        time = MPI_Wtime() - time;
        time /= repetitions;
        if (0 == solver.self()) {
            fprintf(stderr, "backward solve gradient_%c:\t%8g:\n", c[axis], time);
        }
    }
}


void usage(const char *name)
{
    fprintf(stderr, "Usage: %s [-n <grid size> -r <number of repetitions> -t]\n", name);
    fprintf(stderr, description);
}


///
// process arguments
///
void get_options(int argc, char *argv[],
                 int n[3],
                 int & repetitions)
{
    int self;
    
    MPI_Comm_rank(MPI_COMM_WORLD, &self);

    for (int c = 0; c != -1; c = getopt(argc, argv, "htn:r:")) {
        errno = 0;
        if (c == 'n') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            n[0] = n[1] = n[2] = (int) value;
        } else if (c == 'r') {
            char *tail;
            long value = strtol(optarg, &tail, 0);
            if (errno || *tail != '\0') {
                if (0 == self) {
                    fprintf(stderr, "%s: %s: %s\n",
                            argv[0], optarg, strerror(errno));
                }
            }
            repetitions = (int) value;
        } else if (c == 'h') {
            if (0 == self) {
                usage(argv[0]);
            }
            MPI_Finalize();
            exit(0);
        } else if (c == 0) {
            continue;
        } else {
            MPI_Finalize();
            exit(1);
        }
    }
}


int main(int argc, char *argv[])
{
    int n[3] = { 8, 8, 8 };
    int repetitions = 10;

    MPI_Init(&argc, &argv);
    get_options(argc, argv, n, repetitions);
    test(MPI_COMM_WORLD, n, repetitions);
    MPI_Finalize();

    return 0;
}
